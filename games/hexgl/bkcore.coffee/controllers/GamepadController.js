// Generated by CoffeeScript 1.6.3
/*
  GamepadController (Orientation + buttons) for touch devices

  @class bkcore.GamepadController
  @author Mahesh Kulkarni <http://twitter.com/maheshkk>
*/


(function() {
  var GamepadController, exports, _base;

  GamepadController = (function() {
    GamepadController.isCompatible = function() {
      return ('getGamepads' in navigator ||
              'webkitGetGamepads' in navigator ||
              'webkitGamepads' in navigator);
    };

    /*
      Creates a new GamepadController
    */

    function GamepadController(buttonPressCallback) {
      this.buttonPressCallback = buttonPressCallback;
      this.active = true;
      this.leftStickArray = [];
      this.rightStickArray = [];

      var gamepad = new galaxy.gamepad();
      this.gamepad = gamepad;
      gamepad.bind(galaxy.gamepad.Event.CONNECTED, function (device) {
        console.log('Connected', device);
      });

      if (!gamepad.init()) {
        console.error('Your browser does not support gamepads; download ' +
                      'the latest Google Chrome or Mozilla Firefox.');
      }
    }

    /*
      @public
    */


    GamepadController.prototype.updateAvailable = function() {
      var accel, gamepads, gp, lt, rt, sel, _ref, _ref1, _ref2, _ref3;
      if (!this.active) {
        return false;
      }
      var gp = this.gamepad.gamepads[0];
      if (!gp) {
        return false;
      }
      var state = gp.state;
      var lastState = gp.lastState;
      // TODO: Check `lastState` so we set only when the button was actually pressed.
      // Otherwise, `null`.

      this.lstickx = state.LEFT_STICK_X;
      accel = gp.buttons[0];
      lt = gp.buttons[6];
      rt = gp.buttons[7];
      sel = gp.buttons[8];

      this.acceleration = state.ACCELERATE;
      this.ltrigger = state.LEFT_TOP_SHOULDER;
      this.rtrigger = state.RIGHT_TOP_SHOULDER;
      this.select = state.SELECT_BACK;

      this.buttonPressCallback(this);

      return true;
    };

    return GamepadController;

  })();

  exports = exports != null ? exports : this;

  exports.bkcore || (exports.bkcore = {});

  (_base = exports.bkcore).controllers || (_base.controllers = {});

  exports.bkcore.controllers.GamepadController = GamepadController;

}).call(this);
